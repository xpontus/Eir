name: Build Standalone Apps

on:
  push:
    tags: ['v*']
  workflow_dispatch:
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Clean previous builds
        run: |
          rm -rf build dist *.spec.bak
          mkdir -p dist

      # Force PyInstaller to write into dist/
      - name: Build macOS app
        run: |
          pyinstaller --clean --noconfirm \
            --distpath dist --workpath build \
            eir_standalone.spec
          echo "After PyInstaller:" && ls -lah dist || true

      # Your packaging script should write the DMG. If it writes to repo root,
      # move it into dist/ so paths are consistent.
      - name: Create DMG (only on tag)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          python package_mac.py dmg-only
          mv -f Eir-STPA-Tool-*.dmg dist/ 2>/dev/null || true
          echo "After packaging:" && ls -lah dist || true

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eir-macos
          path: |
            dist/Eir.app/
            dist/Eir-STPA-Tool-*.dmg
          if-no-files-found: ignore

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Clean previous builds
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist)  { Remove-Item -Recurse -Force dist }
          New-Item -ItemType Directory -Force -Path dist | Out-Null

      # Force PyInstaller to write into dist/
      - name: Build Windows app
        run: |
          pyinstaller --clean --noconfirm ^
            --distpath dist --workpath build ^
            eir_windows.spec

      - name: Create Windows ZIP (only on tag)
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path eir-windows | Out-Null
          Copy-Item dist\Eir.exe eir-windows\
          Copy-Item LICENSE, README.md -Destination eir-windows\
          Compress-Archive -Path eir-windows\* -DestinationPath dist\Eir-Windows.zip
          Get-ChildItem -Recurse dist

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eir-windows
          path: |
            dist/Eir.exe
            dist/Eir-Windows.zip
          if-no-files-found: ignore

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show downloaded files
        run: ls -lahR artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/eir-macos/dist/Eir-STPA-Tool-*.dmg
            artifacts/eir-windows/dist/Eir-Windows.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
